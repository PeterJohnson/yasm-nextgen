#
# x86 CPU recognition
#
#  Copyright (C) 2002-2007  Peter Johnson
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND OTHER CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR OTHER CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
%{
#include <util.h>

#include <cctype>
#include <cstring>

#include <yasmx/Support/Compose.h>
#include <yasmx/Support/phash.h>
#include <yasmx/errwarn.h>

#include "modules/arch/x86/X86Arch.h"

namespace yasm
{
namespace arch
{
namespace x86
{

#define PROC_8086	0
#define PROC_186	1
#define PROC_286	2
#define PROC_386	3
#define PROC_486	4
#define PROC_586	5
#define PROC_686	6
#define PROC_p2		7
#define PROC_p3		8
#define PROC_p4		9
#define PROC_prescott	10
#define PROC_conroe	11
#define PROC_penryn	12
#define PROC_nehalem	13
#define PROC_westmere   14
#define PROC_sandybridge 15

static void
x86_cpu_intel(X86Arch::CpuMask& cpu, unsigned int data)
{
    cpu.reset();

    cpu.set(CPU_Priv);
    if (data >= PROC_286)
        cpu.set(CPU_Prot);
    if (data >= PROC_386)
        cpu.set(CPU_SMM);
    if (data >= PROC_sandybridge)
        cpu.set(CPU_AVX);
    if (data >= PROC_westmere)
    {
        cpu.set(CPU_AES);
        cpu.set(CPU_CLMUL);
    }
    if (data >= PROC_nehalem)
    {
        cpu.set(CPU_SSE42);
        cpu.set(CPU_XSAVE);
    }
    if (data >= PROC_penryn)
        cpu.set(CPU_SSE41);
    if (data >= PROC_conroe)
        cpu.set(CPU_SSSE3);
    if (data >= PROC_prescott)
        cpu.set(CPU_SSE3);
    if (data >= PROC_p4)
        cpu.set(CPU_SSE2);
    if (data >= PROC_p3)
        cpu.set(CPU_SSE);
    if (data >= PROC_p2)
        cpu.set(CPU_MMX);
    if (data >= PROC_486)
        cpu.set(CPU_FPU);
    if (data >= PROC_prescott)
        cpu.set(CPU_EM64T);

    if (data >= PROC_p4)
        cpu.set(CPU_P4);
    if (data >= PROC_p3)
        cpu.set(CPU_P3);
    if (data >= PROC_686)
        cpu.set(CPU_686);
    if (data >= PROC_586)
        cpu.set(CPU_586);
    if (data >= PROC_486)
        cpu.set(CPU_486);
    if (data >= PROC_386)
        cpu.set(CPU_386);
    if (data >= PROC_286)
        cpu.set(CPU_286);
    if (data >= PROC_186)
        cpu.set(CPU_186);
    cpu.set(CPU_086);
}

static void
x86_cpu_ia64(X86Arch::CpuMask& cpu, unsigned int data)
{
    cpu.reset();
    cpu.set(CPU_Priv);
    cpu.set(CPU_Prot);
    cpu.set(CPU_SMM);
    cpu.set(CPU_SSE2);
    cpu.set(CPU_SSE);
    cpu.set(CPU_MMX);
    cpu.set(CPU_FPU);
    cpu.set(CPU_IA64);
    cpu.set(CPU_P4);
    cpu.set(CPU_P3);
    cpu.set(CPU_686);
    cpu.set(CPU_586);
    cpu.set(CPU_486);
    cpu.set(CPU_386);
    cpu.set(CPU_286);
    cpu.set(CPU_186);
    cpu.set(CPU_086);
}

#define PROC_bulldozer	11
#define PROC_k10    10
#define PROC_venice 9
#define PROC_hammer 8
#define PROC_k7     7
#define PROC_k6     6

static void
x86_cpu_amd(X86Arch::CpuMask& cpu, unsigned int data)
{
    cpu.reset();

    cpu.set(CPU_Priv);
    cpu.set(CPU_Prot);
    cpu.set(CPU_SMM);
    cpu.set(CPU_3DNow);
    if (data >= PROC_bulldozer)
        cpu.set(CPU_SSE5);
    if (data >= PROC_k10)
        cpu.set(CPU_SSE4a);
    if (data >= PROC_venice)
        cpu.set(CPU_SSE3);
    if (data >= PROC_hammer)
        cpu.set(CPU_SSE2);
    if (data >= PROC_k7)
        cpu.set(CPU_SSE);
    if (data >= PROC_k6)
        cpu.set(CPU_MMX);
    cpu.set(CPU_FPU);

    if (data >= PROC_hammer)
        cpu.set(CPU_Hammer);
    if (data >= PROC_k7)
        cpu.set(CPU_Athlon);
    if (data >= PROC_k6)
        cpu.set(CPU_K6);
    cpu.set(CPU_686);
    cpu.set(CPU_586);
    cpu.set(CPU_486);
    cpu.set(CPU_386);
    cpu.set(CPU_286);
    cpu.set(CPU_186);
    cpu.set(CPU_086);
}

static void
x86_cpu_set(X86Arch::CpuMask& cpu, unsigned int data)
{
    cpu.set(data);
}

static void
x86_cpu_clear(X86Arch::CpuMask& cpu, unsigned int data)
{
    cpu.reset(data);
}

static void
x86_cpu_set_sse4(X86Arch::CpuMask& cpu, unsigned int data)
{
    cpu.set(CPU_SSE41);
    cpu.set(CPU_SSE42);
}

static void
x86_cpu_clear_sse4(X86Arch::CpuMask& cpu, unsigned int data)
{
    cpu.reset(CPU_SSE41);
    cpu.reset(CPU_SSE42);
}

%}
%ignore-case
%language=C++
%compare-strncmp
%readonly-tables
%enum
%struct-type
%define class-name CpuHash
struct CpuParseData {
    const char *name;
    void (*handler) (X86Arch::CpuMask& cpu, unsigned int data);
    unsigned int data;
};
%%
8086,		x86_cpu_intel,	PROC_8086
186,		x86_cpu_intel,	PROC_186
80186,		x86_cpu_intel,	PROC_186
i186,		x86_cpu_intel,	PROC_186
286,		x86_cpu_intel,	PROC_286
80286,		x86_cpu_intel,	PROC_286
i286,		x86_cpu_intel,	PROC_286
386,		x86_cpu_intel,	PROC_386
80386,		x86_cpu_intel,	PROC_386
i386,		x86_cpu_intel,	PROC_386
486,		x86_cpu_intel,	PROC_486
80486,		x86_cpu_intel,	PROC_486
i486,		x86_cpu_intel,	PROC_486
586,		x86_cpu_intel,	PROC_586
i586,		x86_cpu_intel,	PROC_586
pentium,	x86_cpu_intel,	PROC_586
p5,		x86_cpu_intel,	PROC_586
686,		x86_cpu_intel,	PROC_686
i686,		x86_cpu_intel,	PROC_686
p6,		x86_cpu_intel,	PROC_686
ppro,		x86_cpu_intel,	PROC_686
pentiumpro,	x86_cpu_intel,	PROC_686
p2,		x86_cpu_intel,	PROC_p2
pentium2,	x86_cpu_intel,	PROC_p2
pentium-2,	x86_cpu_intel,	PROC_p2
pentiumii,	x86_cpu_intel,	PROC_p2
pentium-ii,	x86_cpu_intel,	PROC_p2
p3,		x86_cpu_intel,	PROC_p3
pentium3,	x86_cpu_intel,	PROC_p3
pentium-3,	x86_cpu_intel,	PROC_p3
pentiumiii,	x86_cpu_intel,	PROC_p3
pentium-iii,	x86_cpu_intel,	PROC_p3
katmai,		x86_cpu_intel,	PROC_p3
p4,		x86_cpu_intel,	PROC_p4
pentium4,	x86_cpu_intel,	PROC_p4
pentium-4,	x86_cpu_intel,	PROC_p4
pentiumiv,	x86_cpu_intel,	PROC_p4
pentium-iv,	x86_cpu_intel,	PROC_p4
williamette,	x86_cpu_intel,	PROC_p4
ia64,		x86_cpu_ia64,	0
ia-64,		x86_cpu_ia64,	0
itanium,	x86_cpu_ia64,	0
k6,		x86_cpu_amd,	PROC_k6
k7,		x86_cpu_amd,	PROC_k7
athlon,		x86_cpu_amd,	PROC_k7
k8,		x86_cpu_amd,	PROC_hammer
hammer,		x86_cpu_amd,	PROC_hammer
clawhammer,	x86_cpu_amd,	PROC_hammer
opteron,	x86_cpu_amd,	PROC_hammer
athlon64,	x86_cpu_amd,	PROC_hammer
athlon-64,	x86_cpu_amd,	PROC_hammer
venice,		x86_cpu_amd,	PROC_venice
k10,		x86_cpu_amd,	PROC_k10
bulldozer,	x86_cpu_amd,	PROC_bulldozer
prescott,	x86_cpu_intel,	PROC_prescott
conroe,		x86_cpu_intel,	PROC_conroe
penryn,		x86_cpu_intel,	PROC_penryn
nehalem,	x86_cpu_intel,	PROC_nehalem
westmere,	x86_cpu_intel,	PROC_westmere
sandybridge,	x86_cpu_intel,	PROC_sandybridge
#
# Features have "no" versions to disable them, and only set/reset the
# specific feature being changed.  All other bits are left alone.
#
fpu,		x86_cpu_set,	CPU_FPU
nofpu,		x86_cpu_clear,	CPU_FPU
mmx,		x86_cpu_set,	CPU_MMX
nommx,		x86_cpu_clear,	CPU_MMX
sse,		x86_cpu_set,	CPU_SSE
nosse,		x86_cpu_clear,	CPU_SSE
sse2,		x86_cpu_set,	CPU_SSE2
nosse2,		x86_cpu_clear,	CPU_SSE2
sse3,		x86_cpu_set,	CPU_SSE3
nosse3,		x86_cpu_clear,	CPU_SSE3
#pni,		x86_cpu_set,	CPU_PNI
#nopni,		x86_cpu_clear,	CPU_PNI
3dnow,		x86_cpu_set,	CPU_3DNow
no3dnow,	x86_cpu_clear,	CPU_3DNow
cyrix,		x86_cpu_set,	CPU_Cyrix
nocyrix,	x86_cpu_clear,	CPU_Cyrix
amd,		x86_cpu_set,	CPU_AMD
noamd,		x86_cpu_clear,	CPU_AMD
smm,		x86_cpu_set,	CPU_SMM
nosmm,		x86_cpu_clear,	CPU_SMM
prot,		x86_cpu_set,	CPU_Prot
noprot,		x86_cpu_clear,	CPU_Prot
protected,	x86_cpu_set,	CPU_Prot
noprotected,	x86_cpu_clear,	CPU_Prot
undoc,		x86_cpu_set,	CPU_Undoc
noundoc,	x86_cpu_clear,	CPU_Undoc
undocumented,	x86_cpu_set,	CPU_Undoc
noundocumented,	x86_cpu_clear,	CPU_Undoc
obs,		x86_cpu_set,	CPU_Obs
noobs,		x86_cpu_clear,	CPU_Obs
obsolete,	x86_cpu_set,	CPU_Obs
noobsolete,	x86_cpu_clear,	CPU_Obs
priv,		x86_cpu_set,	CPU_Priv
nopriv,		x86_cpu_clear,	CPU_Priv
privileged,	x86_cpu_set,	CPU_Priv
noprivileged,	x86_cpu_clear,	CPU_Priv
svm,		x86_cpu_set,	CPU_SVM
nosvm,		x86_cpu_clear,	CPU_SVM
padlock,	x86_cpu_set,	CPU_PadLock
nopadlock,	x86_cpu_clear,	CPU_PadLock
em64t,		x86_cpu_set,	CPU_EM64T
noem64t,	x86_cpu_clear,	CPU_EM64T
ssse3,		x86_cpu_set,	CPU_SSSE3
nossse3,	x86_cpu_clear,	CPU_SSSE3
sse4.1,		x86_cpu_set,	CPU_SSE41
nosse4.1,	x86_cpu_clear,	CPU_SSE41
sse41,		x86_cpu_set,	CPU_SSE41
nosse41,	x86_cpu_clear,	CPU_SSE41
sse4.2,		x86_cpu_set,	CPU_SSE42
nosse4.2,	x86_cpu_clear,	CPU_SSE42
sse42,		x86_cpu_set,	CPU_SSE42
nosse42,	x86_cpu_clear,	CPU_SSE42
sse4a,		x86_cpu_set,	CPU_SSE4a
nosse4a,	x86_cpu_clear,	CPU_SSE4a
sse4,		x86_cpu_set_sse4,	0
nosse4,		x86_cpu_clear_sse4,	0
sse5,		x86_cpu_set,	CPU_SSE5
nosse5,		x86_cpu_clear,	CPU_SSE5
xsave,		x86_cpu_set,	CPU_XSAVE
noxsave,	x86_cpu_clear,	CPU_XSAVE
avx,		x86_cpu_set,	CPU_AVX
noavx,		x86_cpu_clear,	CPU_AVX
fma,		x86_cpu_set,	CPU_FMA
nofma,		x86_cpu_clear,	CPU_FMA
aes,		x86_cpu_set,	CPU_AES
noaes,		x86_cpu_clear,	CPU_AES
clmul,		x86_cpu_set,	CPU_CLMUL
noclmul,	x86_cpu_clear,	CPU_CLMUL
pclmulqdq,	x86_cpu_set,	CPU_CLMUL
nopclmulqdq,	x86_cpu_clear,	CPU_CLMUL
%%

void
X86Arch::parse_cpu(const std::string& cpuid)
{
    std::string::size_type cpuid_len = cpuid.size();

    if (cpuid_len > 15)
        return;

    static char lcaseid[16];
    for (size_t i=0; i<cpuid_len; i++)
        lcaseid[i] = std::tolower(cpuid[i]);
    lcaseid[cpuid_len] = '\0';

    const CpuParseData* pdata = CpuHash::in_word_set(lcaseid, cpuid_len);
    if (!pdata)
    {
        warn_set(WARN_GENERAL,
                 String::compose(N_("unrecognized CPU identifier `%1'"),
                                 cpuid));
        return;
    }

    pdata->handler(m_active_cpu, pdata->data);
}

}}} // namespace yasm::arch::x86
