start = arch

arch = element Arch {
	attribute id { text },
	nm+,
	descr,
	(fills & registers & isas & features & cpus & formats & insns)
	}

# Code fill
fills = element Fills { codefill* }
codefill = element CodeFill {
	attribute id { text },
	fill+
	}
fill = element Fill {
	attribute size { xsd:int },
	list { xsd:hexBinary+ }
	}

# Registers and register groups
registers = element Registers { (register|reggroup)* }
register = element Register {
	attribute id { text },
	attribute size { xsd:int },
	attribute value { xsd:int },
	nm+
	}
reggroup = element RegGroup {
	attribute id { text },
	nm*,
	(element RegisterRef {
		attribute idref { text },
		attribute index { xsd:int }?
		} |
	 register)+
	}

# ISA
isas = element Isas { isa+ }
isa = element Isa {
	attribute id { text },
	nm+,
	descr,
	(regref|codefillref|formatref|featuremap)+
	}
codefillref = element CodeFillRef {
	attribute idref { text },
	attribute default { "true" }?,
	nm+
	}
formatref = element FormatRef {
	attribute idref { text },
	attribute default { "true" }?
	}
featuremap = element FeatureMap {
	element FromFeatures { featureref+ },
	element ToReg { regref+ }
	}

# CPU feature
features = element Features { feature* }
feature = element Feature {
	attribute id { text }?,
	nm*,
	descr,
	(regref|featureref)*
	}

# CPU
cpus = element Cpus { cpu* }
cpu = element Cpu {
	attribute id { text },
	nm+,
	descr?,
	isaref+,
	featureref*
	}

# Formats
formats = element Formats { (format|field)+ }
format = element Format {
	attribute id { text },
	attribute type { "bytesequence" },
	(byte|bytes)+
	}
byte = element Byte {
	attribute optional { "true" }?,
	(field|fieldref)+
	}
bytes = element Bytes {
	attribute optional { "true" }?,
	(field|fieldref)+
	}
field = element Field {
	attribute id { text },
	attribute offset { xsd:int }?,
	attribute size { xsd:int }?,
	attribute shift { xsd:int }?,
	attribute special { text }?,
	attribute overwrite { "true" }?,
	fieldmatch*
	}
fieldmatch = element FieldMatch {
	(regref|number)+,
	fieldvalue?
	}
fieldvalue = element FieldValue { text }
number = element Number { text }

# Instructions
insns = element Insns { insn+ }
insn = element Insn {
	attribute id { text },
	attribute formats { text }?,
	(isaref|featureref|setfield|regoperand|memoperand|immoperand|syntax|constraint)+
	}
setfield = element SetField {
	attribute field { text },
	attribute value { text }
	}
regoperand = element RegOperand {
	attribute group { text }?,
	attribute name { text }?,
	attribute field { text }?,
	attribute out { text }?,
	attribute in { text }?
	}
memoperand = element MemOperand {
	attribute size { xsd:int }?,
	attribute field { text }?,
	attribute out { text }?,
	attribute in { text }?
	}
immoperand = element ImmOperand {
	attribute size { xsd:int }?,
	attribute field { text }?,
	attribute in { text }
	}
syntax = element Syntax {
	attribute mode { text },
	text
	}
constraint = element Constraint {
	text
	}

# Reference elements
isaref = element IsaRef { attribute idref { text } }
regref = element RegisterRef { attribute idref { text } }
featureref = element FeatureRef { attribute idref { text } }
tableref = element TableRef { attribute idref { text } }
fieldref = element FieldRef { attribute idref { text } }

# Common elements
nm = element Name { text }
descr = element Description { text }


# vim: set sw=2 ts=2 sts=2:
